type: edu
files:
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswerException
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from shutil import copy2
    import os
    import sqlite3
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD, where D is a digit.')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with correct credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, value_to_return):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10}', output, re.MULTILINE)

        for number in numbers:
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong('Your table should have columns described in the stage instructions.')
        except Exception:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output, attach):
        numbers = re.findall(r'400000\d{10}', output, re.MULTILINE)

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                for row in rows:
                    if number in row:
                        break
                else:
                    return CheckResult.wrong('Your database doesnâ€™t save newly created cards.')
        return CheckResult.correct()


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, '0'),
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: banking/banking.py
  visible: true
  text: "import random\nclass Account(object):\n    total_accounts=[]\n    def __init__(self):\n\
    \        self.CARD_NUMBER=self.generate_account_number()\n        self.PIN=str(random.randint(0,9999)).zfill(4)\n\
    \        self.balance=0\n        Account.total_accounts.append(self)\n    def\
    \ generate_account_number(self):\n        MII_BIN=\"400000\"\n        AI=str(random.randint(1,999999999)).zfill(9)\n\
    \        number=MII_BIN+AI\n        digits=list(int(char) for char in number)\n\
    \        for i in range(0,len(digits),2):\n            digits[i]=digits[i]*2\n\
    \        for i in range(0,len(digits),2):\n            if len(str(digits[i]))>1:\n\
    \                digits[i]=sum(list(int(char) for char in str(digits[i])))\n \
    \       if sum(digits)%10 ==0:\n            CS=\"0\"\n        else:\n        \
    \    CS=str(10-sum(digits)%10)\n        number +=CS\n        return number\n \
    \   def menu(self):\n        print(\"\"\"1. Balance\n2. Log out\n0. Exit\"\"\"\
    )\n\n    def get_card_number(self):\n        return self.CARD_NUMBER\n    def\
    \ get_pin_number(self):\n        return self.PIN    \n    def print_message(self):\n\
    \        print(\"Your card has been created\")\n        print(\"Your card number:\"\
    )\n        print(self.CARD_NUMBER)\n        print(\"Your card PIN:\")\n      \
    \  print(self.PIN)\n    def log_in(self):\n        print(\"You have successfully\
    \ logged in!\")\n        while True:\n            self.menu()\n            choice=int(input())\n\
    \            if choice==1:\n                print(\"Balance: \"+ str(self.balance))\n\
    \            elif choice==2:\n                print(\"You have successfully logged\
    \ out!\")\n                break\n            elif choice==0:\n              \
    \  exit()\ndef account_avilable(Account,card_number):\n    for account in Account.total_accounts:\n\
    \        if account.CARD_NUMBER==str(card_number):\n            return account\n\
    \    return None\n\ndef Menu():\n    print(\"\"\"1. Create an account\n2. Log\
    \ into account\n0. Exit\"\"\")\n\nwhile True:\n    Menu()\n    choice=int(input())\n\
    \    if choice==1:\n        acount=Account()\n        acount.print_message()\n\
    \    elif choice==2:\n        print(\"Enter your card number:\")\n        card_number=input()\n\
    \        pin=int(input(\"Enter your PIN:\"))\n        acc=account_avilable(Account,card_number)\n\
    \        if  acc is not None and acc.get_pin_number()==str(pin):\n           \
    \ acc.log_in()\n        else:\n            print(\"Wrong card number or PIN!\"\
    )\n    elif choice==0:\n        print(\"Bye!\")\n        break\n\n        "
  learner_created: false
- name: card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/593/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/109/stages/593/implement">JetBrains
    Academy</a>
  time: Sat, 04 Jul 2020 10:59:27 UTC
record: 3
